// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.13.0
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MemberService_Testing_FullMethodName     = "/MemberService/Testing"
	MemberService_Create_FullMethodName      = "/MemberService/Create"
	MemberService_LogIn_FullMethodName       = "/MemberService/LogIn"
	MemberService_ChangePwd_FullMethodName   = "/MemberService/ChangePwd"
	MemberService_IsValidJwt_FullMethodName  = "/MemberService/IsValidJwt"
	MemberService_IsJwtInTime_FullMethodName = "/MemberService/IsJwtInTime"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	//定義api名稱，傳入參數與回傳值
	Testing(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	LogIn(ctx context.Context, in *LogInReq, opts ...grpc.CallOption) (*LogInRes, error)
	ChangePwd(ctx context.Context, in *ChangePwdReq, opts ...grpc.CallOption) (*ChangePwdRes, error)
	IsValidJwt(ctx context.Context, in *JwtToken, opts ...grpc.CallOption) (*IsValidJwtRes, error)
	IsJwtInTime(ctx context.Context, in *JwtToken, opts ...grpc.CallOption) (*IsJwtInTimeRes, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Testing(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, MemberService_Testing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, MemberService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) LogIn(ctx context.Context, in *LogInReq, opts ...grpc.CallOption) (*LogInRes, error) {
	out := new(LogInRes)
	err := c.cc.Invoke(ctx, MemberService_LogIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangePwd(ctx context.Context, in *ChangePwdReq, opts ...grpc.CallOption) (*ChangePwdRes, error) {
	out := new(ChangePwdRes)
	err := c.cc.Invoke(ctx, MemberService_ChangePwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsValidJwt(ctx context.Context, in *JwtToken, opts ...grpc.CallOption) (*IsValidJwtRes, error) {
	out := new(IsValidJwtRes)
	err := c.cc.Invoke(ctx, MemberService_IsValidJwt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsJwtInTime(ctx context.Context, in *JwtToken, opts ...grpc.CallOption) (*IsJwtInTimeRes, error) {
	out := new(IsJwtInTimeRes)
	err := c.cc.Invoke(ctx, MemberService_IsJwtInTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	//定義api名稱，傳入參數與回傳值
	Testing(context.Context, *TestRequest) (*TestResponse, error)
	Create(context.Context, *CreateReq) (*CreateRes, error)
	LogIn(context.Context, *LogInReq) (*LogInRes, error)
	ChangePwd(context.Context, *ChangePwdReq) (*ChangePwdRes, error)
	IsValidJwt(context.Context, *JwtToken) (*IsValidJwtRes, error)
	IsJwtInTime(context.Context, *JwtToken) (*IsJwtInTimeRes, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) Testing(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Testing not implemented")
}
func (UnimplementedMemberServiceServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMemberServiceServer) LogIn(context.Context, *LogInReq) (*LogInRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedMemberServiceServer) ChangePwd(context.Context, *ChangePwdReq) (*ChangePwdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePwd not implemented")
}
func (UnimplementedMemberServiceServer) IsValidJwt(context.Context, *JwtToken) (*IsValidJwtRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidJwt not implemented")
}
func (UnimplementedMemberServiceServer) IsJwtInTime(context.Context, *JwtToken) (*IsJwtInTimeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsJwtInTime not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_Testing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Testing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Testing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Testing(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).LogIn(ctx, req.(*LogInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangePwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangePwd(ctx, req.(*ChangePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsValidJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JwtToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsValidJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_IsValidJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsValidJwt(ctx, req.(*JwtToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsJwtInTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JwtToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsJwtInTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_IsJwtInTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsJwtInTime(ctx, req.(*JwtToken))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Testing",
			Handler:    _MemberService_Testing_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MemberService_Create_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _MemberService_LogIn_Handler,
		},
		{
			MethodName: "ChangePwd",
			Handler:    _MemberService_ChangePwd_Handler,
		},
		{
			MethodName: "IsValidJwt",
			Handler:    _MemberService_IsValidJwt_Handler,
		},
		{
			MethodName: "IsJwtInTime",
			Handler:    _MemberService_IsJwtInTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
